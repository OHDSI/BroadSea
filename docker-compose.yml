version: '3.9'

volumes:
  atlasdb-postgres-data:
    name: atlasdb-postgres-data
  rstudio-home-data:
    name: rstudio-home-data
  rstudio-tmp-data:
    name: rstudio-tmp-data
  openldap-data:
    name: openldap-data
  jdbc-drivers-data:
    name: jdbc-drivers-data
  cdm-postprocessing-data:
    name: cdm-postprocessing-data
  shareddb:
    name: shareddb

services:
  
  traefik:
    image: docker.io/library/traefik:v2.10.1
    container_name: traefik
    restart: unless-stopped
    ipc: none
    read_only: true
    environment:
      BROADSEA_HOST: ${BROADSEA_HOST}
    labels:
     - "traefik.enable=true"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./traefik/traefik_${HTTP_TYPE}.yml:/etc/traefik/traefik.yml:ro
      - ./traefik/config.yml:/etc/traefik/config.yml:ro
      - ${BROADSEA_CERTS_FOLDER}:/etc/certs:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro

  broadsea-content:
    profiles: [ "default", "content" ]
    container_name: broadsea-content
    image: nginx
    restart: unless-stopped
    environment:
      CONTENT_TITLE: ${CONTENT_TITLE}
      CONTENT_ARES_DISPLAY: ${CONTENT_ARES_DISPLAY}
      CONTENT_ATLAS_DISPLAY: ${CONTENT_ATLAS_DISPLAY}
      CONTENT_HADES_DISPLAY: ${CONTENT_HADES_DISPLAY}
      CONTENT_OPENSHINYSERVER_DISPLAY: ${CONTENT_OPENSHINYSERVER_DISPLAY}
      CONTENT_POSITCONNECT_DISPLAY: ${CONTENT_POSITCONNECT_DISPLAY}
    volumes:
      - ./broadsea_content/images:/usr/share/nginx/html/images
      - ./broadsea_content/style.css:/usr/share/nginx/html/style.css
      - ./broadsea_content/index.html:/tmp/index.html
      - ./broadsea_content/envsubst.sh:/tmp/envsubst.sh:ro
    entrypoint: ["sh", "/tmp/envsubst.sh" ]
    labels:
      - "traefik.enable=true"

  broadsea-hades:
    profiles: [ "default", "hades" ]
    container_name: broadsea-hades
    image: ohdsi/broadsea-hades:4.2.1
    platform: "linux/amd64"
    environment:
      - USER=${HADES_USER}
      - PASSWORD=${HADES_PASSWORD}
    volumes:
      - rstudio-home-data:/home
      - rstudio-tmp-data:/tmp
    labels:
      - "traefik.enable=true"
    ports:
      - "8787:8787"
      - "6311:6311"

  # WebAPI and Atlas services based on the standard Docker Hub images -------------
  ohdsi-webapi-from-image:
    profiles: [ "default", "webapi-from-image" ]
    image: docker.io/ohdsi/webapi:latest
    extends: 
      file: "./compose/ohdsi-webapi.yml"
      service: ohdsi-webapi

  ohdsi-atlas-from-image:
    profiles: [ "default", "atlas-from-image" ]
    image: docker.io/ohdsi/atlas:latest
    extends: 
      file: "./compose/ohdsi-atlas.yml"
      service: ohdsi-atlas

  # WebAPI and Atlas services based on git repo (for developers) -------------
  ohdsi-webapi-from-git:
    profiles: [ "webapi-from-git" ]
    build: 
      context: ${WEBAPI_GITHUB_URL}
      args:
        MAVEN_PARAMS: "-DskipTests=true -DskipUnitTests=true"
    extends: 
      file: "./compose/ohdsi-webapi.yml"
      service: ohdsi-webapi

  ohdsi-atlas-from-git:
    profiles: [ "atlas-from-git" ]
    build: ${ATLAS_GITHUB_URL}
    extends: 
      file: "./compose/ohdsi-atlas.yml"
      service: ohdsi-atlas

  # -----------------------------------------------------------------

  broadsea-atlasdb:
    profiles: [ "default", "atlasdb" ]
    image: ohdsi/broadsea-atlasdb:2.0.0
    container_name: broadsea-atlasdb
    platform: "linux/amd64"
    cpus: 2
    mem_limit: "2G"
    environment:
      - POSTGRES_PASSWORD=mypass
    ports:
      - "5432:5432"
    volumes:
     - atlasdb-postgres-data:/var/lib/postgresql/data
     - ./100_populate_source_source_daimon.sql:/docker-entrypoint-initdb.d/100_populate_source_source_daimon.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 10

  broadsea-solr-vocab:
    profiles: [ "solr-vocab-no-import", "solr-vocab-with-import" ]
    container_name: solr-vocab
    restart: unless-stopped
    image: solr:8.11.1
    environment: 
      SOLR_OPTS: 
        -DVOCAB_VERSION=${VOCAB_VERSION}
        -DVOCAB_JDBC_DRIVER_PATH=${VOCAB_JDBC_DRIVER_PATH}
        -DVOCAB_JDBC_URL=${VOCAB_JDBC_URL}
        -DVOCAB_JDBC_USER=${VOCAB_JDBC_USER}
        -DVOCAB_JDBC_PASSWORD=${VOCAB_JDBC_PASSWORD}
    volumes:
      - ./${VOCAB_JDBC_FILE_NAME}:/opt/solr-8.11.1/server/lib/${VOCAB_JDBC_FILE_NAME}:ro
      - ./solr:/tmp/solr_config:ro
    ports:
      - "8983:8983"
    labels:
      - "traefik.enable=true"
    command:
      - solr-precreate
      - ${VOCAB_VERSION}
      - /tmp/solr_config
    healthcheck:
      test: curl --fail ${SOLR_VOCAB_ENDPOINT} || exit 1
      interval: 10s
      timeout: 5s
      retries: 5

  broadsea-solr-vocab-run-import:
    profiles: [ "solr-vocab-with-import" ]
    container_name: solr-vocab-run-import
    image: curlimages/curl
    depends_on:
      broadsea-solr-vocab:
        condition: service_healthy
    command: curl -d "vocab_database_schema=${VOCAB_DATABASE_SCHEMA}" -X POST ${SOLR_VOCAB_ENDPOINT}/${VOCAB_VERSION}/dataimport?command=full-import&entity=concept

  broadsea-ares:
    profiles: [ "ares" ]
    container_name: broadsea-ares
    restart: unless-stopped
    build:
      context: https://github.com/OHDSI/Ares.git
    volumes:
      - ${ARES_DATA_FOLDER}:/usr/share/nginx/html/ares/data:ro
    labels:
      - "traefik.enable=true"


  broadsea-omop-vocab-load:
    profiles: [ "omop-vocab-pg-load" ]
    container_name: omop-vocab-load
    extends:
      file: "./compose/postgres-load.yml"
      service: broadsea-postgres-load
    environment:
      VOCAB_PG_HOST: ${VOCAB_PG_HOST}
      VOCAB_PG_DATABASE: ${VOCAB_PG_DATABASE}
      VOCAB_PG_SCHEMA: ${VOCAB_PG_SCHEMA}
      VOCAB_PG_USER: ${VOCAB_PG_USER}
      VOCAB_PG_PASSWORD: ${VOCAB_PG_PASSWORD}
      UMLS_API_KEY: ${UMLS_API_KEY}
    volumes:
      - ./omop_vocab/scripts:/tmp/scripts
      - ${VOCAB_PG_FILES_PATH}:/tmp/files
    entrypoint: ["sh", "/tmp/scripts/load_omop_vocab.sh" ]


  broadsea-phoebe-load:
    profiles: [ "phoebe-pg-load" ]
    container_name: broadsea-phoebe-load
    extends:
      file: "./compose/postgres-load.yml"
      service: broadsea-postgres-load
    environment:
      PHOEBE_PG_HOST: ${PHOEBE_PG_HOST}
      PHOEBE_PG_DATABASE: ${PHOEBE_PG_DATABASE}
      PHOEBE_PG_SCHEMA: ${PHOEBE_PG_SCHEMA}
      PHOEBE_PG_USER: ${PHOEBE_PG_USER}
      PHOEBE_PG_PASSWORD: ${PHOEBE_PG_PASSWORD}
    volumes:
      - ./phoebe:/tmp
    entrypoint: ["sh", "/tmp/load_phoebe.sh" ]


  broadsea-arachne-execution-engine:
    profiles: [ "arachne-execution-engine" ]
    image: odysseusinc/execution_engine:1.19.1
    container_name: broadsea-arachne-execution-engine
    restart: unless-stopped
    ports:
      - "8888:8888"
    privileged: true
    platform: "linux/amd64"
    volumes:
      - ./execution_engine:/dist
    labels:
     - "traefik.enable=true"


  # Security providers for testing purposes

  broadsea-openldap:
    profiles: [ "openldap" ]
    image: docker.io/bitnami/openldap:2.6
    container_name: broadsea-openldap
    restart: unless-stopped
    ports:
      - '1389:1389'
      - '1636:1636'
    environment:
      LDAP_ADMIN_USERNAME: ${SECURITY_LDAP_SYSTEM_USERNAME}
      LDAP_ADMIN_PASSWORD: ${SECURITY_LDAP_SYSTEM_PASSWORD}
      LDAP_USERS: ${OPEN_LDAP_USERS}
      LDAP_PASSWORDS: ${OPEN_LDAP_PASSWORDS}

  # shiny server options (open-source and commercial)

  broadsea-open-shiny-server:
    profiles: [ "open-shiny-server" ]
    image: rocker/shiny:4.3.0
    platform: "linux/amd64"
    container_name: broadsea-open-shiny-server
    restart: unless-stopped
    ports:
      - "3838:3838"
    volumes:
      - ${OPEN_SHINY_SERVER_APP_ROOT}:/srv/shiny-server/apps:ro
    labels:
      - "traefik.enable=true" 

  broadsea-posit-connect:
    profiles: [ "posit-connect" ]
    image: rstudio/rstudio-connect:jammy-2023.05.0
    platform: "linux/amd64"
    container_name: broadsea-posit-connect
    restart: unless-stopped
    ports:
      - "3939:3939"
    privileged: true
    environment:
      RSC_LICENSE: ${POSIT_CONNECT_LICENSE}
      RSC_LICENSE_SERVER: ${POSIT_CONNECT_LICENSE_SERVER}
      R_VERSION: ${POSIT_CONNECT_R_VERSION}
    volumes:
      - ${POSIT_CONNECT_LICENSE_FILE}:/etc/rstudio-connect/license.lic:ro
      - ${POSIT_CONNECT_GCFG_FILE}:/etc/rstudio-connect/rstudio-connect.gcfg:ro
    labels:
      - "traefik.enable=true"

# CDM Post-Processing ---------------

  broadsea-run-achilles:
    profiles: [ "cdm-postprocessing", "achilles" ]
    build: "https://github.com/alondhe/Achilles.git#dockerfile"
    platform: "linux/amd64"
    container_name: broadsea-run-achilles
    volumes:
      - jdbc-drivers-data:/jdbc
      - cdm-postprocessing-data:/postprocessing
      - ./postprocessing/init.R:/postprocessing/init.R
      - ./achilles/run_achilles.R:/postprocessing/achilles/scripts/${CDM_DATABASE_SCHEMA}.R
    environment:
      CDM_CONNECTIONDETAILS_DBMS: ${CDM_CONNECTIONDETAILS_DBMS}
      CDM_CONNECTIONDETAILS_USER: ${CDM_CONNECTIONDETAILS_USER}
      CDM_CONNECTIONDETAILS_PASSWORD: ${CDM_CONNECTIONDETAILS_PASSWORD}
      CDM_CONNECTIONDETAILS_SERVER: ${CDM_CONNECTIONDETAILS_SERVER}
      CDM_CONNECTIONDETAILS_PORT: ${CDM_CONNECTIONDETAILS_PORT}
      CDM_CONNECTIONDETAILS_EXTRA_SETTINGS: ${CDM_CONNECTIONDETAILS_EXTRA_SETTINGS}
      CDM_VERSION: ${CDM_VERSION}
      CDM_SOURCE_NAME: ${CDM_SOURCE_NAME}
      CDM_DATABASE_SCHEMA: ${CDM_DATABASE_SCHEMA}
      RESULTS_DATABASE_SCHEMA: ${RESULTS_DATABASE_SCHEMA}
      SCRATCH_DATABASE_SCHEMA: ${SCRATCH_DATABASE_SCHEMA}
      VOCAB_DATABASE_SCHEMA: ${VOCAB_DATABASE_SCHEMA}
      TEMP_EMULATION_SCHEMA: ${TEMP_EMULATION_SCHEMA}

      ACHILLES_ANALYSIS_IDS: ${ACHILLES_ANALYSIS_IDS}
      ACHILLES_CREATE_TABLE: ${ACHILLES_CREATE_TABLE}
      ACHILLES_SMALL_CELL_COUNT: ${ACHILLES_SMALL_CELL_COUNT}
      ACHILLES_CREATE_INDICES: ${ACHILLES_CREATE_INDICES}
      ACHILLES_NUM_THREADS: ${ACHILLES_NUM_THREADS}
      ACHILLES_TEMP_ACHILLES_PREFIX: ${ACHILLES_TEMP_ACHILLES_PREFIX}
      ACHILLES_DROP_SCRATCH_TABLES: ${ACHILLES_DROP_SCRATCH_TABLES}
      ACHILLES_VERBOSE_MODE: ${ACHILLES_VERBOSE_MODE}
      ACHILLES_OPTIMIZE_ATLAS_CACHE: ${ACHILLES_OPTIMIZE_ATLAS_CACHE}
      ACHILLES_DEFAULT_ANALYSES_ONLY: ${ACHILLES_DEFAULT_ANALYSES_ONLY}
      ACHILLES_UPDATE_GIVEN_ANALYSES_ONLY: ${ACHILLES_UPDATE_GIVEN_ANALYSES_ONLY}
      ACHILLES_EXCLUDE_ANALYSIS_IDS: ${ACHILLES_EXCLUDE_ANALYSIS_IDS}
      ACHILLES_SQL_ONLY: ${ACHILLES_SQL_ONLY}
    entrypoint: ["Rscript", "/postprocessing/achilles/scripts/${CDM_DATABASE_SCHEMA}.R" ]

  broadsea-run-dqd:
    profiles: [ "cdm-postprocessing", "dqd" ]
    build: "https://github.com/alondhe/DataQualityDashboard.git#dockerfile"
    platform: "linux/amd64"
    container_name: broadsea-run-dqd
    volumes:
      - jdbc-drivers-data:/jdbc
      - cdm-postprocessing-data:/postprocessing
      - ./postprocessing/init.R:/postprocessing/init.R
      - ./dqd/run_dqd.R:/postprocessing/dqd/scripts/${CDM_DATABASE_SCHEMA}.R
    environment:
      CDM_CONNECTIONDETAILS_DBMS: ${CDM_CONNECTIONDETAILS_DBMS}
      CDM_CONNECTIONDETAILS_USER: ${CDM_CONNECTIONDETAILS_USER}
      CDM_CONNECTIONDETAILS_PASSWORD: ${CDM_CONNECTIONDETAILS_PASSWORD}
      CDM_CONNECTIONDETAILS_SERVER: ${CDM_CONNECTIONDETAILS_SERVER}
      CDM_CONNECTIONDETAILS_PORT: ${CDM_CONNECTIONDETAILS_PORT}
      CDM_CONNECTIONDETAILS_EXTRA_SETTINGS: ${CDM_CONNECTIONDETAILS_EXTRA_SETTINGS}
      CDM_VERSION: ${CDM_VERSION}
      CDM_SOURCE_NAME: ${CDM_SOURCE_NAME}
      CDM_DATABASE_SCHEMA: ${CDM_DATABASE_SCHEMA}
      RESULTS_DATABASE_SCHEMA: ${RESULTS_DATABASE_SCHEMA}
      VOCAB_DATABASE_SCHEMA: ${VOCAB_DATABASE_SCHEMA}

      DQD_NUM_THREADS: ${DQD_NUM_THREADS}
      DQD_SQL_ONLY: ${DQD_SQL_ONLY}
      DQD_SQL_ONLY_UNION_COUNT: ${DQD_SQL_ONLY_UNION_COUNT}
      DQD_SQL_ONLY_INCREMENTAL_INSERT: ${DQD_SQL_ONLY_INCREMENTAL_INSERT}
      DQD_VERBOSE_MODE: ${DQD_VERBOSE_MODE}
      DQD_WRITE_TO_TABLE: ${DQD_WRITE_TO_TABLE}
      DQD_WRITE_TABLE_NAME: ${DQD_WRITE_TABLE_NAME}
      DQD_WRITE_TO_CSV: ${DQD_WRITE_TO_CSV}
      DQD_CSV_FILE: ${DQD_CSV_FILE}
      DQD_CHECK_LEVELS: ${DQD_CHECK_LEVELS}
      DQD_CHECK_NAMES: ${DQD_CHECK_NAMES}
      DQD_COHORT_DEFINITION_ID: ${DQD_COHORT_DEFINITION_ID}
      DQD_COHORT_DATABASE_SCHEMA: ${DQD_COHORT_DATABASE_SCHEMA}
      DQD_COHORT_TABLE_NAME: ${DQD_COHORT_TABLE_NAME}
      DQD_TABLES_TO_EXCLUDE: ${DQD_TABLES_TO_EXCLUDE}
      DQD_TABLE_CHECK_THRESHOLD_LOC: ${DQD_TABLE_CHECK_THRESHOLD_LOC}
      DQD_FIELD_CHECK_THRESHOLD_LOC: ${DQD_FIELD_CHECK_THRESHOLD_LOC}
      DQD_CONCEPT_CHECK_THRESHOLD_LOC: ${DQD_CONCEPT_CHECK_THRESHOLD_LOC}
    entrypoint: ["Rscript", "/postprocessing/dqd/scripts/${CDM_DATABASE_SCHEMA}.R" ]

  broadsea-run-aresindexer-only:
    profiles: [ "aresindexer" ]
    extends: 
      file: "./compose/aresindexer.yml"
      service: broadsea-run-aresindexer

  broadsea-run-aresindexer-after:
    profiles: [ "cdm-postprocessing" ]
    extends: 
      file: "./compose/aresindexer.yml"
      service: broadsea-run-aresindexer
    depends_on:
      broadsea-run-achilles:
        condition: service_completed_successfully
      broadsea-run-dqd:
        condition: service_completed_successfully

  broadsea-dbt:
    profiles: [ "dbt" ]
    image: ohdsi/broadsea-dbt
    container_name: broadsea-dbt
    platform: "linux/amd64"
    restart: unless-stopped
    volumes:
      - ${DBT_PROJECT_PATH}:/usr/app
      - ${DBT_PROFILE_PATH}:/root/.dbt/

  ### Perseus

  # shareddb:
  #   profiles: [ "perseus" ]
  #   image: perseushub/shareddb:latest
  #   platform: "linux/amd64"
  #   container_name: shareddb
  #   restart: unless-stopped
  #   volumes:
  #     - shareddb:/data/postgres
  #   ports:
  #     - "5433:5432"

  # files-manager:
  #   profiles: [ "perseus" ]
  #   image: perseushub/files-manager:latest
  #   platform: "linux/amd64"
  #   container_name: files-manager
  #   restart: unless-stopped
  #   ports:
  #     - "10500:10500"
  #   environment:
  #     SPRING_PROFILES_ACTIVE: docker
  #     DATASOURCE_URL: jdbc:postgresql://shareddb:5433/shared
  #   depends_on:
  #     - shareddb

  # perseus-white-rabbit:
  #   profiles: [ "perseus" ]
  #   image: ohdsi/perseus-white-rabbit:latest
  #   platform: "linux/amd64"
  #   container_name: perseus-white-rabbit
  #   restart: unless-stopped
  #   ports:
  #     - "8000:8000"
  #   environment:
  #     SPRING_PROFILES_ACTIVE: docker
  #     HOSTNAME: ${BROADSEA_HOST}
  #   depends_on:
  #     - shareddb
  #     - files-manager
  #   labels:
  #     - "traefik.enable=true"
